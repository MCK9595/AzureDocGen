@page "/weather"
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject WeatherApiClient WeatherApi

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data loaded from a backend API service.</p>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        <h4 class="alert-heading">API Connection Error</h4>
        <p>Failed to load weather data from the API service.</p>
        <hr>
        <p class="mb-0">Error details: @errorMessage</p>
        <button class="btn btn-outline-danger mt-2" @onclick="RetryAsync">Retry</button>
    </div>
}
else if (forecasts != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadWeatherDataAsync();
    }

    private async Task LoadWeatherDataAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            forecasts = await WeatherApi.GetWeatherAsync();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            forecasts = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RetryAsync()
    {
        await LoadWeatherDataAsync();
    }
}
